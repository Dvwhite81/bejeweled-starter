const { expect } = require('chai');

const Bejeweled = require("../class/bejeweled.js");

describe ('Bejeweled', function () {

  // Add tests for setting up a basic board
  let grid;

  it('should be 8 columns and 8 rows', function () {
    grid = [
      [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
      [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
    ];

    expect(grid.length).to.equal(8);
    expect(grid[0].length).to.equal(8);
  });

  it('recognizes no matches', function () {

    grid = [
      ['1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8'],
      ['2-1', '2-2', '2-3', '2-4', '2-5', '2-6', '2-7', '2-8'],
      ['3-1', '3-2', '3-3', '3-4', '3-5', '3-6', '3-7', '3-8'],
      ['4-1', '4-2', '4-3', '4-4', '4-5', '4-6', '4-7', '4-8'],
      ['5-1', '5-2', '5-3', '5-4', '5-5', '5-6', '5-7', '5-8'],
      ['6-1', '6-2', '6-3', '6-4', '6-5', '6-6', '6-7', '6-8'],
      ['7-1', '7-2', '7-3', '7-4', '7-5', '7-6', '8-6', '7-8'],
      ['8-1', '8-2', '8-3', '8-4', '8-5', '8-6', '8-7', '8-8']
    ];

    expect(Bejeweled.checkForMatches(grid)).to.be.false;

  });

  it('recognizes horizontal wins', function () {

    grid = [
      ['1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8'],
      ['2-1', '2-2', '2-3', '2-4', '2-5', '2-6', '2-7', '2-8'],
      ['3-1', '3-2', 'X', 'X', 'X', '3-6', '3-7', '3-8'],
      ['4-1', '4-2', '4-3', '4-4', '4-5', '4-6', '4-7', '4-8'],
      ['5-1', '5-2', '5-3', '5-4', '5-5', '5-6', '5-7', '5-8'],
      ['6-1', '6-2', '6-3', '6-4', '6-5', '6-6', '6-7', '6-8'],
      ['7-1', '7-2', '7-3', '7-4', '7-5', '7-6', '8-6', '7-8'],
      ['8-1', '8-2', '8-3', '8-4', '8-5', '8-6', '8-7', '8-8']
    ];

    expect(Bejeweled.checkForMatches(grid)).to.be.true;

  });

  it('recognizes vertical wins', function () {

    grid = [
      ['1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8'],
      ['2-1', '2-2', '2-3', '2-4', '2-5', '2-6', '2-7', '2-8'],
      ['3-1', '3-2', '3-3', 'X', '3-5', '3-6', '3-7', '3-8'],
      ['4-1', '4-2', '4-3', 'X', '4-5', '4-6', '4-7', '4-8'],
      ['5-1', '5-2', '5-3', 'X', '5-5', '5-6', '5-7', '5-8'],
      ['6-1', '6-2', '6-3', '6-4', '6-5', '6-6', '6-7', '6-8'],
      ['7-1', '7-2', '7-3', '7-4', '7-5', '7-6', '8-6', '7-8'],
      ['8-1', '8-2', '8-3', '8-4', '8-5', '8-6', '8-7', '8-8']
    ];

    expect(Bejeweled.checkForMatches(grid)).to.be.true;

  });


  it('recognizes diagonal downward wins', function () {

    grid = [
      ['1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8'],
      ['2-1', '2-2', '2-3', '2-4', '2-5', '2-6', '2-7', '2-8'],
      ['3-1', '3-2', '3-3', '3-4', '3-5', '3-6', '3-7', '3-8'],
      ['4-1', '4-2', '4-3', '4-4', '4-5', '4-6', '4-7', '4-8'],
      ['5-1', '5-2', '5-3', '5-4', '5-5', '5-6', '5-7', '5-8'],
      ['6-1', 'X', '6-3', '6-4', '6-5', '6-6', '6-7', '6-8'],
      ['7-1', '7-2', 'X', '7-4', '7-5', '7-6', '8-6', '7-8'],
      ['8-1', '8-2', '8-3', 'X', '8-5', '8-6', '8-7', '8-8']
    ];

    expect(Bejeweled.checkForMatches(grid)).to.be.true;

  });

  it('recognizes diagonal upward wins', function () {

    grid = [
      ['1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8'],
      ['2-1', '2-2', '2-3', '2-4', '2-5', '2-6', '2-7', '2-8'],
      ['3-1', '3-2', '3-3', '3-4', '3-5', '3-6', '3-7', '3-8'],
      ['4-1', '4-2', '4-3', '4-4', '4-5', '4-6', '4-7', '4-8'],
      ['5-1', '5-2', '5-3', '5-4', '5-5', '5-6', '5-7', '5-8'],
      ['6-1', '6-2', '6-3', '6-4', '6-5', '6-6', '6-7', 'X'],
      ['7-1', '7-2', '7-3', '7-4', '7-5', '7-6', 'X', '7-8'],
      ['8-1', '8-2', '8-3', '8-4', '8-5', 'X', '8-7', '8-8']
    ];

    expect(Bejeweled.checkForMatches(grid)).to.be.true;

  });

  // Add tests for a valid swap that matches 3

  // Add tests for swaps that set up combos

  // Add tests to check if there are no possible valid moves

});
